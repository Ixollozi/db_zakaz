import sqlite3

def up_data(db_path: str = '3nf.db') -> bool:
    connection = None
    try:
        connection = sqlite3.connect(db_path)
        connection.row_factory = sqlite3.Row
        sql = connection.cursor()

        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–∞–±–ª–∏—Ü
        tables = [t[0] for t in sql.execute('SELECT name FROM sqlite_master WHERE type = "table";').fetchall()]
        if not tables:
            print("‚ùå –í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç —Ç–∞–±–ª–∏—Ü.")
            return False

        print("üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã:", ", ".join(tables))
        table = input("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã: ").strip()
        if table not in tables:
            print("‚ùå –û—à–∏–±–∫–∞: —Ç–∞–±–ª–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
            return False

        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–æ–ª–æ–Ω–æ–∫
        columns = [col[1] for col in sql.execute(f'PRAGMA table_info({table});').fetchall()]
        if not columns:
            print("‚ùå –í –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ç–∞–±–ª–∏—Ü–µ –Ω–µ—Ç –∫–æ–ª–æ–Ω–æ–∫.")
            return False

        print("üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏:", ", ".join(columns))
        column = input("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏: ").strip()
        if column not in columns:
            print("‚ùå –û—à–∏–±–∫–∞: –∫–æ–ª–æ–Ω–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
            return False

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–µ—Ä–≤–∏—á–Ω—ã–π –∫–ª—é—á, –∏–Ω–∞—á–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º rowid
        primary_key = sql.execute(f"PRAGMA table_info({table});").fetchone()[1] or "rowid"

        rows = sql.execute(f'SELECT {primary_key}, {column} FROM {table} ORDER BY {primary_key};').fetchall()
        if not rows:
            print("‚ùå –í –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ç–∞–±–ª–∏—Ü–µ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö.")
            return False

        print("üìã –î–∞–Ω–Ω—ã–µ –≤ –∫–æ–ª–æ–Ω–∫–µ:")
        for row in rows:
            print(f"  {primary_key}: {row[primary_key]}, {column}: {row[column]}")

        try:
            row_id = int(input(f"–í–≤–µ–¥–∏—Ç–µ {primary_key} —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: ").strip())
        except ValueError:
            print("‚ùå –û—à–∏–±–∫–∞: –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º!")
            return False

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Å—Ç—Ä–æ–∫–∞
        result = sql.execute(f'SELECT {column} FROM {table} WHERE {primary_key} = ?', (row_id,)).fetchone()
        if not result:
            print("‚ùå –û—à–∏–±–∫–∞: —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
            return False

        current_value = result[0]
        print(f"üìå –¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {current_value}")

        new_value = input("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: ").strip()
        sql.execute(f'UPDATE {table} SET {column} = ? WHERE {primary_key} = ?;', (new_value, row_id))
        connection.commit()
        print("‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!")
        return True

    except sqlite3.Error as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        if connection:
            connection.rollback()
        return False

    except Exception as e:
        print(f"‚ùå –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        if connection:
            connection.rollback()
        return False

    finally:
        if connection:
            connection.close()

if __name__ == "__main__":
    up_data()
